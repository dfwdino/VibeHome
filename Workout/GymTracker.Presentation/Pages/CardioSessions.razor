@page "/cardio-sessions"
@using GymTracker.Domain.Models
@using GymTracker.Application.Services
@inject CardioSessionService CardioSessionService
@inject CardioTypeService CardioTypeService
@inject LocationService LocationService

<h3>Cardio Sessions</h3>

<div class="row mb-3">
    <div class="col">
        <button class="btn btn-primary" @onclick="() => { ShowAddForm = true; }">Add New Session</button>
    </div>
</div>

@if (ShowAddForm || ShowEditForm)
{
    <div class="card mb-3">
        <div class="card-body">
            <h5 class="card-title">@(ShowEditForm ? "Edit Cardio Session" : "Add New Cardio Session")</h5>
            <EditForm Model="@(ShowEditForm ? EditSession : NewSession)" OnValidSubmit="HandleValidSubmit">
                <DataAnnotationsValidator />
                <ValidationSummary />

                <div class="mb-3">
                    <label for="cardioType" class="form-label">Cardio Type</label>
                    <InputSelect id="cardioType" class="form-select" @bind-Value="CardioTypeId">
                        <option value="" selected>Select a cardio type</option>
                        @foreach (var type in CardioTypes)
                        {
                            <option value="@type.Id">@type.Name</option>
                        }
                    </InputSelect>
                </div>

                <div class="mb-3">
                    <label for="location" class="form-label">Location</label>
                    <InputSelect id="location" class="form-select" @bind-Value="LocationId">
                        <option value="" selected>Select a location</option>
                        @foreach (var location in Locations)
                        {
                            <option value="@location.Id">@location.Name</option>
                        }
                    </InputSelect>
                </div>

                <div class="mb-3">
                    <label for="duration" class="form-label">Minutes</label>
                    <InputNumber id="duration" class="form-control" @bind-Value="Duration" />
                </div>

                <div class="mb-3">
                    <label for="distance" class="form-label">Miles</label>
                    <InputNumber id="distance" class="form-control" @bind-Value="Distance" />
                </div>

                <div class="mb-3">
                    <label for="caloriesBurned" class="form-label">Calories Burned</label>
                    <InputNumber id="caloriesBurned" class="form-control" @bind-Value="CaloriesBurned" />
                </div>

                <div class="mb-3">
                    <label for="dateTime" class="form-label">Date and Time</label>
                    <InputDate id="dateTime" class="form-control" @bind-Value="DateTime" />
                </div>

                <button type="submit" class="btn btn-primary">@(ShowEditForm ? "Update" : "Save")</button>
                <button type="button" class="btn btn-secondary" @onclick="CancelForm">Cancel</button>
            </EditForm>
        </div>
    </div>
}

<table class="table text-center">
    <thead>
        <tr>
            <th>Date and Time</th>
            <th>Cardio Type</th>
            <th>Location</th>
            <th>Minutes</th>
            <th>Miles</th>
            <th>Calories Burned</th>
            <th>Actions</th>
        </tr>
    </thead>
    <tbody>
        @foreach (var session in Sessions)
        {
            <tr>
                <td>@session.DateTime.ToShortDateString()</td>
                <td>@CardioTypes.FirstOrDefault(t => t.Id == session.CardioTypeId)?.Name</td>
                <td>@Locations.FirstOrDefault(l => l.Id == session.LocationId)?.Name</td>
                <td>@session.Duration.TotalMinutes</td>
                <td>@session.Distance</td>
                <td>@session.CaloriesBurned</td>
                <td>
                    <button class="btn btn-sm btn-primary me-2" @onclick="() => StartEditSession(session)">Edit</button>
                    <button class="btn btn-sm btn-danger" @onclick="() => DeleteSession(session.Id)">Delete</button>
                </td>
            </tr>
        }
    </tbody>
</table>

@code {
    private List<CardioSession> Sessions { get; set; } = new();
    private List<CardioType> CardioTypes { get; set; } = new();
    private List<Location> Locations { get; set; } = new();
    private CardioSession NewSession { get; set; } = new() { DateTime = DateTime.Now };
    private CardioSession EditSession { get; set; } = new();
    private int? DurationMinutes { get; set; }
    private int? EditDurationMinutes { get; set; }
    private decimal? NewSessionDistance
    {
        get => NewSession.Distance;
        set => NewSession.Distance = value ?? 0;
    }
    private decimal? EditSessionDistance
    {
        get => EditSession.Distance;
        set => EditSession.Distance = value ?? 0;
    }
    private int? NewSessionCaloriesBurned
    {
        get => NewSession.CaloriesBurned;
        set => NewSession.CaloriesBurned = value ?? 0;
    }
    private int? EditSessionCaloriesBurned
    {
        get => EditSession.CaloriesBurned;
        set => EditSession.CaloriesBurned = value ?? 0;
    }
    private DateTime DateTime
    {
        get => ShowEditForm ? EditSession.DateTime : NewSession.DateTime;
        set
        {
            if (ShowEditForm)
                EditSession.DateTime = value;
            else
                NewSession.DateTime = value;
        }
    }
    private bool ShowAddForm { get; set; }
    private bool ShowEditForm { get; set; }
    private int? CardioTypeId
    {
        get => ShowEditForm ? EditSession.CardioTypeId : NewSession.CardioTypeId;
        set
        {
            if (ShowEditForm)
                EditSession.CardioTypeId = value ?? 0;
            else
                NewSession.CardioTypeId = value ?? 0;
        }
    }
    private int? LocationId
    {
        get => ShowEditForm ? EditSession.LocationId : NewSession.LocationId;
        set
        {
            if (ShowEditForm)
                EditSession.LocationId = value ?? 0;
            else
                NewSession.LocationId = value ?? 0;
        }
    }

    private int? Duration
    {
        get => ShowEditForm ? EditDurationMinutes : DurationMinutes;
        set
        {
            if (ShowEditForm)
                EditDurationMinutes = value;
            else
                DurationMinutes = value;
        }
    }

    private decimal? Distance
    {
        get => ShowEditForm ? EditSessionDistance : NewSessionDistance;
        set
        {
            if (ShowEditForm)
                EditSessionDistance = value;
            else
                NewSessionDistance = value;
        }
    }

    private int? CaloriesBurned
    {
        get => ShowEditForm ? EditSessionCaloriesBurned : NewSessionCaloriesBurned;
        set
        {
            if (ShowEditForm)
                EditSessionCaloriesBurned = value;
            else
                NewSessionCaloriesBurned = value;
        }
    }

    protected override async Task OnInitializedAsync()
    {
        await LoadData();
    }

    private async Task LoadData()
    {
        Sessions = (await CardioSessionService.GetAllAsync())
            .OrderByDescending(s => s.DateTime)
            .ToList();
        CardioTypes = (await CardioTypeService.GetAllAsync()).ToList();
        Locations = (await LocationService.GetAllAsync()).ToList();
    }

    private void StartEditSession(CardioSession session)
    {
        EditSession = new CardioSession
        {
            Id = session.Id,
            DateTime = session.DateTime,
            Duration = session.Duration,
            Distance = session.Distance,
            CaloriesBurned = session.CaloriesBurned,
            CardioTypeId = session.CardioTypeId,
            LocationId = session.LocationId
        };
        EditDurationMinutes = (int?)session.Duration.TotalMinutes;
        ShowEditForm = true;
        ShowAddForm = false;
    }

    private void CancelForm()
    {
        ShowAddForm = false;
        ShowEditForm = false;
        NewSession = new CardioSession { DateTime = DateTime.Now };
        EditSession = new CardioSession();
        DurationMinutes = null;
        EditDurationMinutes = null;
    }

    private async Task HandleValidSubmit()
    {
        if (ShowEditForm)
        {
            EditSession.Duration = TimeSpan.FromMinutes(EditDurationMinutes ?? 0);
            await CardioSessionService.UpdateAsync(EditSession);
        }
        else
        {
            NewSession.Duration = TimeSpan.FromMinutes(DurationMinutes ?? 0);
            await CardioSessionService.AddAsync(NewSession);
        }
        
        CancelForm();
        await LoadData();
    }

    private async void DeleteSession(int id)
    {
        await CardioSessionService.DeleteAsync(id);
        await LoadData();
    }
} 