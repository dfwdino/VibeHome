@page "/locations"
@using GymTracker.Domain.Models
@using GymTracker.Application.Services
@inject LocationService LocationService

<h3>Locations</h3>

<div class="row mb-3">
    <div class="col">
        <button class="btn btn-primary" @onclick="ShowAddLocationForm">Add New Location</button>
    </div>
</div>

@if (ShowAddForm || ShowEditForm)
{
    <div class="card mb-3">
        <div class="card-body">
            <h5 class="card-title">@((ShowEditForm ? "Edit" : "Add New") + " Location")</h5>
            <EditForm Model="@CurrentLocation" OnValidSubmit="HandleValidSubmit">
                <DataAnnotationsValidator />
                <ValidationSummary />
                <div class="mb-3">
                    <label for="name" class="form-label">Name</label>
                    <InputText id="name" class="form-control" @bind-Value="@CurrentLocation.Name" />
                </div>
                <button type="submit" class="btn btn-primary">@((ShowEditForm ? "Update" : "Save"))</button>
                <button type="button" class="btn btn-secondary" @onclick="CancelForm">Cancel</button>
            </EditForm>
        </div>
    </div>
}

<table class="table">
    <thead>
        <tr>
            <th>Name</th>
            <th>Actions</th>
        </tr>
    </thead>
    <tbody>
        @foreach (var location in LocationList)
        {
            <tr>
                <td>@location.Name</td>
                <td>
                    <button class="btn btn-sm btn-primary me-2" @onclick="() => StartEditLocation(location)">Edit</button>
                    <button class="btn btn-sm btn-danger" @onclick="async () => await DeleteLocation(location.Id)">Delete</button>
                </td>
            </tr>
        }
    </tbody>
</table>

@code {
    private List<Location> LocationList { get; set; } = new();
    private Location NewLocation { get; set; } = new();
    private Location EditLocation { get; set; } = new();
    private bool ShowAddForm { get; set; }
    private bool ShowEditForm { get; set; }
    private Location CurrentLocation => ShowEditForm ? EditLocation : NewLocation;

    protected override async Task OnInitializedAsync()
    {
        await LoadData();
    }

    private async Task LoadData()
    {
        LocationList = (await LocationService.GetAllAsync()).ToList();
    }

    private async Task HandleValidSubmit()
    {
        if (ShowEditForm)
        {
            await LocationService.UpdateAsync(EditLocation);
        }
        else
        {
            await LocationService.AddAsync(NewLocation);
        }
        NewLocation = new Location();
        EditLocation = new Location();
        ShowAddForm = false;
        ShowEditForm = false;
        await LoadData();
    }

    private void StartEditLocation(Location location)
    {
        EditLocation = location;
        ShowEditForm = true;
        ShowAddForm = false;
    }

    private void CancelForm()
    {
        ShowAddForm = false;
        ShowEditForm = false;
        NewLocation = new Location();
        EditLocation = new Location();
    }

    private async Task DeleteLocation(int id)
    {
        await LocationService.DeleteAsync(id);
        await LoadData();
    }

    private void ShowAddLocationForm()
    {
        ShowAddForm = true;
        ShowEditForm = false;
    }
} 