@using System.Linq.Expressions
@using VibeHome.UI.Shared

<div class="card mb-3">
    <div class="card-body">
        <div class="row">
            <div class="col-md-4 mb-2">
                <div class="input-group">
                    <span class="input-group-text">
                        <i class="oi oi-magnifying-glass"></i>
                    </span>
                    <input type="text" 
                           class="form-control" 
                           placeholder="Search..." 
                           @bind="searchTerm" 
                           @oninput="OnSearchChanged" />
                </div>
            </div>
            @if (ShowDateFilter)
            {
                <div class="col-md-3 mb-2">
                    <div class="input-group">
                        <span class="input-group-text">From</span>
                        <input type="date" 
                               class="form-control" 
                               value="@(startDate?.ToString("yyyy-MM-dd"))" 
                               @onchange="OnStartDateChanged" />
                    </div>
                </div>
                <div class="col-md-3 mb-2">
                    <div class="input-group">
                        <span class="input-group-text">To</span>
                        <input type="date" 
                               class="form-control" 
                               value="@(endDate?.ToString("yyyy-MM-dd"))" 
                               @onchange="OnEndDateChanged" />
                    </div>
                </div>
            }
            <div class="col-md-2 mb-2">
                <button class="btn btn-outline-secondary w-100" @onclick="ClearFilters">
                    <i class="oi oi-x"></i> Clear
                </button>
            </div>
        </div>
        @if (!string.IsNullOrEmpty(searchTerm) || HasActiveDateFilter)
        {
            <div class="mt-2">
                <small class="text-muted">
                    @if (!string.IsNullOrEmpty(searchTerm))
                    {
                        <span class="badge bg-primary me-1">Search: "@searchTerm"</span>
                    }
                    @if (HasActiveDateFilter)
                    {
                        <span class="badge bg-info me-1">Date: @startDate?.ToString("MMM dd") - @endDate?.ToString("MMM dd")</span>
                    }
                    <span class="badge bg-secondary">@FilteredCount results</span>
                </small>
            </div>
        }
    </div>
</div>

@code {
    [Parameter] public bool ShowDateFilter { get; set; } = true;
    [Parameter] public int TotalCount { get; set; }
    [Parameter] public int FilteredCount { get; set; }
    [Parameter] public EventCallback<SearchFilterCriteria> OnFiltersChanged { get; set; }

    private string searchTerm = string.Empty;
    private DateTime? startDate;
    private DateTime? endDate;
    private bool HasActiveDateFilter => startDate.HasValue || endDate.HasValue;

    private async Task OnSearchChanged(ChangeEventArgs e)
    {
        searchTerm = e.Value?.ToString() ?? string.Empty;
        await NotifyFiltersChanged();
    }

    private async Task OnStartDateChanged(ChangeEventArgs e)
    {
        if (DateTime.TryParse(e.Value?.ToString(), out var date))
        {
            startDate = date;
        }
        else
        {
            startDate = null;
        }
        await NotifyFiltersChanged();
    }

    private async Task OnEndDateChanged(ChangeEventArgs e)
    {
        if (DateTime.TryParse(e.Value?.ToString(), out var date))
        {
            endDate = date;
        }
        else
        {
            endDate = null;
        }
        await NotifyFiltersChanged();
    }

    private async Task ClearFilters()
    {
        searchTerm = string.Empty;
        startDate = null;
        endDate = null;
        await NotifyFiltersChanged();
    }

    private async Task NotifyFiltersChanged()
    {
        var criteria = new SearchFilterCriteria
        {
            SearchTerm = searchTerm,
            StartDate = startDate,
            EndDate = endDate
        };
        await OnFiltersChanged.InvokeAsync(criteria);
    }

    public class SearchFilterCriteria
    {
        public string SearchTerm { get; set; } = string.Empty;
        public DateTime? StartDate { get; set; }
        public DateTime? EndDate { get; set; }
    }
} 