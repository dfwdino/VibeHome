@page "/kids"
@attribute [Authorize(Roles = "Parent")]
@inject IKidService KidService
@inject NavigationManager NavigationManager

<h3>Kids</h3>

<button class="btn btn-primary mb-3" @onclick="ToggleForm">@(showForm ? (isEdit ? "Edit Kid" : "Add Kid") : "Add Kid")</button>
<div class="collapse @(showForm ? "show" : "")" id="kidForm">
    <EditForm Model="kidModel" OnValidSubmit="HandleValidSubmit">
        <DataAnnotationsValidator />
        <ValidationSummary />
        <div class="mb-3">
            <label class="form-label">Name</label>
            <InputText class="form-control" @bind-Value="kidModel.Name" />
        </div>
        <div class="mb-3">
            <label class="form-label">Age</label>
            <InputNumber class="form-control" @bind-Value="kidModel.Age" />
        </div>
        <div class="mb-3">
            <label class="form-label">Grade</label>
            <InputText class="form-control" @bind-Value="kidModel.Grade" />
        </div>
        <button type="submit" class="btn btn-success">@(kidModel.KidId == 0 ? "Add Kid" : "Update Kid")</button>
        @if (kidModel.KidId != 0)
        {
            <button type="button" class="btn btn-secondary ms-2" @onclick="ClearForm">Cancel</button>
        }
    </EditForm>
</div>
<div class="d-none d-md-block" style="text-align:center">
    <table class="table table-striped table-hover align-middle">
        <thead>
            <tr>
                <th class="custom-table-header">Name</th>
                <th class="custom-table-header">Age</th>
                <th class="custom-table-header">Actions</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var kid in kids)
            {
                <tr>
                    <td>@kid.Name.ToTitleCase()</td>
                    <td>@kid.Age</td>
                    <td>
                        <button class="btn btn-sm btn-info me-1" @onclick="@(() => EditKid(kid))">Edit</button>
                        <button class="btn btn-sm btn-danger" @onclick="async () => await DeleteKid(kid.KidId)">Delete</button>
                    </td>
                </tr>
            }
        </tbody>
    </table>
</div>
<div class="d-block d-md-none">
    @foreach (var kid in kids)
    {
        <div class="card mb-2 shadow-sm">
            <div class="card-body p-2">
                <div><strong>Name:</strong> @kid.Name.ToTitleCase()</div>
                <div><strong>Age:</strong> @kid.Age</div>
                <div><strong>Grade:</strong> @kid.Grade</div>
                <div class="mt-2 d-flex gap-2">
                    <button class="btn btn-info flex-fill" @onclick="@(() => EditKid(kid))">Edit</button>
                    <button class="btn btn-danger flex-fill" @onclick="async () => await DeleteKid(kid.KidId)">Delete</button>
                </div>
            </div>
        </div>
    }
</div>

@code {
    private List<Kid> kids = new();
    private Kid kidModel = new();
    private bool showForm = false;
    private bool isEdit => kidModel.KidId != 0;

    protected override async Task OnInitializedAsync()
    {
        await LoadKids();
    }

    private async Task LoadKids()
    {
        kids = (await KidService.GetAllAsync()).Where(k => !k.IsDeleted).ToList();
    }

    private async Task HandleValidSubmit()
    {
        if (kidModel.KidId == 0)
            await KidService.AddAsync(kidModel);
        else
            await KidService.UpdateAsync(kidModel);
        await LoadKids();
        ClearForm();
    }

    private void EditKid(Kid kid)
    {
        kidModel = new Kid
        {
            KidId = kid.KidId,
            Name = kid.Name,
            Age = kid.Age,
            Grade = kid.Grade
        };
        showForm = true;
    }

    private async Task DeleteKid(int id)
    {
        await KidService.DeleteAsync(id);
        await LoadKids();
    }

    private void ClearForm()
    {
        kidModel = new Kid();
        showForm = false;
    }

    private void ToggleForm()
    {
        showForm = !showForm;
    }
} 