@page "/users"
@inject IUserService UserService
@inject NavigationManager NavigationManager

<h3>Users Management</h3>

<button class="btn btn-primary mb-3" @onclick="ToggleForm">@(showForm ? (isEdit ? "Edit User" : "Hide Form") : "Add User")</button>

<div class="collapse @(showForm ? "show" : "")" id="userForm">
    <EditForm Model="userModel" OnValidSubmit="HandleValidSubmit">
        <DataAnnotationsValidator />
        <ValidationSummary />
        <div class="mb-3">
            <label class="form-label">Username</label>
            <InputText class="form-control" @bind-Value="userModel.Username" />
        </div>
        <div class="mb-3">
            <label class="form-label">Role</label>
            <InputSelect class="form-select" @bind-Value="userModel.Role">
                <option value="">Select Role</option>
                <option value="Parent">Parent</option>
                <option value="Child">Child</option>
            </InputSelect>
        </div>
        <button type="submit" class="btn btn-success">@(userModel.UserId == 0 ? "Add User" : "Update User")</button>
        @if (userModel.UserId != 0)
        {
            <button type="button" class="btn btn-secondary ms-2" @onclick="ClearForm">Cancel</button>
        }
    </EditForm>
</div>

<div class="d-none d-md-block" style="text-align:center">
    <table class="table table-striped table-hover">
        <thead>
            <tr>
                <th class="custom-table-header">Username</th>
                <th class="custom-table-header">Role</th>
                <th class="custom-table-header">Actions</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var user in users)
            {
                <tr>
                    <td>@user.Username</td>
                    <td>@user.Role</td>
                    <td>
                        <button class="btn btn-sm btn-info me-1" @onclick="() => EditUser(user)">Edit</button>
                        <button class="btn btn-sm btn-danger" @onclick="() => DeleteUser(user.UserId)">Delete</button>
                    </td>
                </tr>
            }
        </tbody>
    </table>
</div>
<div class="d-block d-md-none">
    @foreach (var user in users)
    {
        <div class="card mb-2 shadow-sm">
            <div class="card-body p-2">
                <div><strong>Username:</strong> @user.Username</div>
                <div><strong>Role:</strong> @user.Role</div>
                <div class="mt-2 d-flex gap-2">
                    <button class="btn btn-info flex-fill" @onclick="() => EditUser(user)">Edit</button>
                    <button class="btn btn-danger flex-fill" @onclick="() => DeleteUser(user.UserId)">Delete</button>
                </div>
            </div>
        </div>
    }
</div>

@code {
    private List<User> users = new();
    private User userModel = new();
    private bool showForm = false;
    private bool isEdit => userModel.UserId != 0;

    protected override async Task OnInitializedAsync()
    {
        if (AuthState.CurrentUser?.Role != "Parent")
        {
            NavigationManager.NavigateTo("/");
            return;
        }
        await LoadUsers();
    }

    private async Task LoadUsers()
    {
        users = (await UserService.GetAllAsync()).Where(u => !u.IsDeleted).ToList();
    }

    private async Task HandleValidSubmit()
    {
        if (userModel.UserId == 0)
            await UserService.AddAsync(userModel);
        else
            await UserService.UpdateAsync(userModel);
        await LoadUsers();
        ClearForm();
    }

    private void EditUser(User user)
    {
        userModel = new User
        {
            UserId = user.UserId,
            Username = user.Username,
            Role = user.Role
        };
        showForm = true;
    }

    private async Task DeleteUser(int id)
    {
        await UserService.DeleteAsync(id);
        await LoadUsers();
    }

    private void ClearForm()
    {
        userModel = new User();
        showForm = false;
    }

    private void ToggleForm()
    {
        showForm = !showForm;
    }
} 