@page "/choreitems"
@attribute [Authorize(Roles = "Parent")]
@inject IChoreItemService ChoreItemService

<h3>Chore Items</h3>

<button class="btn btn-primary mb-3" @onclick="ToggleForm">@(showForm ? (isEdit ? "Edit Chore" : "Add Chore") : "Add Chore")</button>
<div class="collapse @(showForm ? "show" : "")" id="choreItemForm">
    <EditForm Model="choreItemModel" OnValidSubmit="HandleValidSubmit">
        <DataAnnotationsValidator />
        <ValidationSummary />
        <div class="mb-3">
            <label class="form-label">Chore Name</label>
            <InputText class="form-control" @bind-Value="choreItemModel.ChoreName" />
        </div>
        <div class="mb-3">
            <label class="form-label">Price</label>
            <InputNumber class="form-control" @bind-Value="choreItemModel.Price" />
        </div>
        <div class="mb-3">
            <label class="form-label">Description</label>
            <InputText class="form-control" @bind-Value="choreItemModel.Description" />
        </div>
        <button type="submit" class="btn btn-success">@(choreItemModel.ChoreItemId == 0 ? "Add Chore" : "Update Chore")</button>
        @if (choreItemModel.ChoreItemId != 0)
        {
            <button type="button" class="btn btn-secondary ms-2" @onclick="ClearForm">Cancel</button>
        }
    </EditForm>
</div>
<div class="d-none d-md-block">
    <table class="table table-striped table-hover align-middle">
        <thead>
            <tr>
                <th>Chore</th>
                <th>Price</th>
                <th>Description</th>
                <th>Actions</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var item in choreItems)
            {
                <tr>
                    <td>@item.ChoreName.ToTitleCase()</td>
                    <td>@item.Price</td>
                    <td>@item.Description</td>
                    <td>
                        <button class="btn btn-sm btn-info me-1" @onclick="@(() => EditChoreItem(item))">Edit</button>
                        <button class="btn btn-sm btn-danger" @onclick="async () => await DeleteChoreItem(item.ChoreItemId)">Delete</button>
                    </td>
                </tr>
            }
        </tbody>
    </table>
</div>
<div class="d-block d-md-none">
    @foreach (var item in choreItems)
    {
        <div class="card mb-2 shadow-sm">
            <div class="card-body p-2">
                <div><strong>Chore:</strong> @item.ChoreName.ToTitleCase()</div>
                <div><strong>Price:</strong> @item.Price</div>
                @if (!string.IsNullOrWhiteSpace(item.Description))
                {
                    <div><strong>Description:</strong> @item.Description</div>
                }
                <div class="mt-2 d-flex gap-2">
                    <button class="btn btn-info flex-fill" @onclick="@(() => EditChoreItem(item))">Edit</button>
                    <button class="btn btn-danger flex-fill" @onclick="async () => await DeleteChoreItem(item.ChoreItemId)">Delete</button>
                </div>
            </div>
        </div>
    }
</div>

@code {
    private List<ChoreItem> choreItems = new();
    private ChoreItem choreItemModel = new();
    private bool showForm = false;
    private bool isEdit => choreItemModel.ChoreItemId != 0;

    protected override async Task OnInitializedAsync()
    {
        await LoadChoreItems();
    }

    private async Task LoadChoreItems()
    {
        choreItems = (await ChoreItemService.GetAllAsync()).Where(c => !c.IsDeleted).ToList();
    }

    private async Task HandleValidSubmit()
    {
        if (choreItemModel.ChoreItemId == 0)
            await ChoreItemService.AddAsync(choreItemModel);
        else
            await ChoreItemService.UpdateAsync(choreItemModel);
        await LoadChoreItems();
        ClearForm();
    }

    private void EditChoreItem(ChoreItem item)
    {
        choreItemModel = new ChoreItem
        {
            ChoreItemId = item.ChoreItemId,
            ChoreName = item.ChoreName,
            Price = item.Price,
            Description = item.Description
        };
        showForm = true;
    }

    private async Task DeleteChoreItem(int id)
    {
        await ChoreItemService.DeleteAsync(id);
        await LoadChoreItems();
    }

    private void ClearForm()
    {
        choreItemModel = new ChoreItem();
        showForm = false;
    }

    private void ToggleForm()
    {
        showForm = !showForm;
    }
} 